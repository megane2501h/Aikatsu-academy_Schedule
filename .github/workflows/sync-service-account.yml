name: アイカツアカデミー！スケジュール同期（サービスアカウント認証）

on:
  # 手動実行（テスト用）
  workflow_dispatch:
    inputs:
      force_sync:
        description: 'サービスアカウント認証でのスケジュール同期を実行'
        required: false
        default: true
        type: boolean

jobs:
  sync-schedule-service-account:
    runs-on: ubuntu-latest
    
    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}
    
    - name: Python環境をセットアップ
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: uvをセットアップ（高速化版）
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    
    - name: 依存関係をインストール（uvを使用）
      run: |
        echo "📦 uvを使用して依存関係をインストール中（キャッシュ有効）..."
        uv sync --locked --no-dev || {
          echo "⚠️  ロックファイルまたはキャッシュエラーが発生しました。対処します..."
          uv lock
          uv sync --no-dev --no-cache
        }
        echo "✅ 依存関係のインストールが完了しました"
    
    - name: サービスアカウント認証情報を設定
      env:
        GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
        CALENDAR_ID: ${{ secrets.CALENDAR_ID }}
      run: |
        echo "🔐 サービスアカウント認証情報を設定中..."
        
        # サービスアカウントJSONファイルを作成
        echo '${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}' > service-account.json
        
        # ファイルの存在と有効性を確認
        if [ ! -f service-account.json ] || [ ! -s service-account.json ]; then
          echo "❌ service-account.jsonが空または存在しません"
          echo "🔧 GOOGLE_SERVICE_ACCOUNT_JSON secretが正しく設定されているか確認してください"
          exit 1
        fi
        
        # JSON形式の妥当性チェック
        if ! python -m json.tool service-account.json > /dev/null 2>&1; then
          echo "❌ service-account.jsonが有効なJSON形式ではありません"
          exit 1
        fi
        
        # ファイルサイズの確認
        sa_size=$(stat -c%s service-account.json)
        echo "📊 ファイルサイズ確認:"
        echo "  service-account.json: ${sa_size} bytes"
        
        # サービスアカウント情報の表示（デバッグ用・機密情報は除外）
        echo "🔍 サービスアカウント情報:"
        python -c "import json; data=json.load(open('service-account.json')); print(f'  プロジェクトID: {data.get(\"project_id\", \"不明\")}'); print(f'  クライアントID: {data.get(\"client_id\", \"不明\")}'); print(f'  アカウントメール: {data.get(\"client_email\", \"不明\")}')"
        
        echo "✅ サービスアカウント認証ファイルを正常に設定しました"
    
    - name: 設定ファイルを作成（サービスアカウント認証用）
      env:
        CALENDAR_ID: ${{ secrets.CALENDAR_ID }}
      run: |
        echo "⚙️ サービスアカウント認証用の設定ファイルを作成..."
        cat > config.ini << EOF
        [DEFAULT]
        target_url = https://aikatsu-academy.com/schedule/
        
        [GoogleCalendar]
        # サービスアカウント認証を使用
        auth_method = service_account
        service_account_file = ../service-account.json
        calendar_id = ${{ secrets.CALENDAR_ID }}
        
        [Sync]
        update_interval_hours = 6
        
        # カテゴリ → 絵文字マッピング（基本）
        [CategoryEmojis]
        short動画 = 📱
        カード = 🎴
        グッズ = 🧸
        スペシャル = ✨
        メンバーシップ = 👑

        # チャンネル → 絵文字マッピング（[]内の内容から判定・最優先）
        [ChannelEmojis]
        みえる個人配信 = 🩷
        みえる個人ch = 🩷
        メエ個人配信 = 💙
        メエ個人ch = 💙
        パリン個人配信 = 💛
        パリン個人ch = 💛
        たいむ個人配信 = 💜
        たいむ個人ch = 💜
        配信部 = 🏫
        各個人チャンネル = 🩷💙💛💜

        # 特別キーワード → 絵文字マッピング（最優先）
        [SpecialKeywords]
        デミカツ通信 = 📰
        アイカツ！チャレンジ = 💪
        アイカツ！ミッション = 🔥
        アイカツ！ツアーズ = 🗺️
        アイカツアカデミー！配信部 = 🏫
        メンバーシップ限定 = 👑
        
        # チャンネルURL → 配信者マッピング（Googleカレンダーの詳細にURLを追加）
        [ChannelURLs]
        みえる個人配信 = https://www.youtube.com/@himeno-mieru
        みえる個人ch = https://www.youtube.com/@himeno-mieru
        メエ個人配信 = https://www.youtube.com/@mamimu-meh
        メエ個人ch = https://www.youtube.com/@mamimu-meh
        パリン個人配信 = https://www.youtube.com/@wao-parin
        パリン個人ch = https://www.youtube.com/@wao-parin
        たいむ個人配信 = https://www.youtube.com/@rindou-taimu
        たいむ個人ch = https://www.youtube.com/@rindou-taimu
        アイカツアカデミー！配信部 = https://www.youtube.com/@aikatsu-academy
        各個人チャンネル = みえる： https://www.youtube.com/@himeno-mieru メエ： https://www.youtube.com/@mamimu-meh パリン： https://www.youtube.com/@wao-parin たいむ： https://www.youtube.com/@rindou-taimu
        EOF
        echo "✅ 設定ファイルを作成しました"
    
    - name: スケジュール同期を実行（サービスアカウント認証）
      run: |
        cd src
        echo "🚀 スケジュール同期を開始します（サービスアカウント認証）..."
        echo "📍 実行環境:"
        echo "  作業ディレクトリ: $(pwd)"
        echo "  Python バージョン: $(python --version)"
        echo "  認証方式: サービスアカウント"
        echo "  設定ファイル: ../config.ini"
        
        # 設定ファイルの確認
        if [ ! -f ../config.ini ]; then
          echo "❌ 設定ファイルが見つかりません: ../config.ini"
          exit 1
        fi
        
        # サービスアカウントファイルの確認
        if [ ! -f ../service-account.json ]; then
          echo "❌ サービスアカウントファイルが見つかりません: ../service-account.json"
          exit 1
        fi
        
        echo "✅ 必要なファイルがすべて揃いました"
        echo "📋 実行コマンド: uv run python main.py --manual --config ../config.ini"
        
        # サービスアカウント認証での同期実行
        if uv run python main.py --manual --config ../config.ini; then
          echo "✅ スケジュール同期が正常に完了しました（サービスアカウント認証）"
          echo "🎉 トークン期限切れの心配はもうありません！"
        else
          exit_code=$?
          echo "❌ スケジュール同期でエラーが発生しました (終了コード: $exit_code)"
          echo "🔧 サービスアカウント認証のトラブルシューティング:"
          echo "  1. サービスアカウント設定の確認:"
          echo "     - Google Cloud Consoleでサービスアカウントが有効か"
          echo "     - JSON keyファイルが正しいか"
          echo "     - GOOGLE_SERVICE_ACCOUNT_JSON secretが最新か"
          echo "  2. カレンダー権限の確認:"
          echo "     - Google Calendarでサービスアカウントが共有されているか"
          echo "     - 権限が「予定の変更および管理」になっているか"
          echo "  3. その他:"
          echo "     - CALENDAR_ID secretが正しいか"
          echo "     - 公式サイトの構造変更やアクセス制限"
          echo "  📖 詳細: docs/SERVICE_ACCOUNT_SETUP.md"
          
          # スクレーピングのみのテスト実行（フォールバック）
          echo ""
          echo "🔍 スクレーピング機能の確認を実行します..."
          if python ../utils/scrape_only.py; then
            echo "✅ スクレーピング機能は正常です - 問題は認証設定のみ"
          else
            echo "❌ スクレーピング機能にも問題があります"
          fi
          
          exit $exit_code
        fi
    
    - name: 実行結果をSlackに通知（オプション）
      if: always()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          message="✅ アイカツアカデミー！スケジュール同期が成功しました（サービスアカウント認証・完全自動化）"
        else
          message="❌ アイカツアカデミー！スケジュール同期が失敗しました（サービスアカウント認証）"
        fi
        
        if [ -n "$SLACK_WEBHOOK_URL" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$message\"}" \
            $SLACK_WEBHOOK_URL
        fi 